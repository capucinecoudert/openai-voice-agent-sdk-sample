"""
Agent d'information g√©n√©rale ResaSki
Renseigne sur l'√©cole, les sports propos√©s, la m√©t√©o et les services pratiques
"""

import json
import os
import requests
from agents import Agent, function_tool
from agents.extensions.handoff_prompt import RECOMMENDED_PROMPT_PREFIX

STYLE_INSTRUCTIONS = "Ton professionnel mais amical, chaleureux, patient et passionn√© de sports de montagne. Utiliser des phrases courtes et un rythme mod√©r√©."

@function_tool
def get_vendor_info(vendor_id: int = None):
    """R√©cup√®re les informations g√©n√©rales du vendor (nom, localisation, zip_code, etc.)"""
    try:
        base_url = os.getenv("NEXT_PUBLIC_API_BASE_URL")
        vendor_id = vendor_id or int(os.getenv("NEXT_PUBLIC_VENDOR_ID", "4"))
        
        print(f'üè´ DEBUG - get_vendor_info called for vendor_id: {vendor_id}')
        
        url = f"{base_url}/vendors/{vendor_id}"
        print(f'üåê URL: {url}')
        
        response = requests.get(
            url,
            headers={
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'ngrok-skip-browser-warning': 'true'
            },
            timeout=30
        )
        
        print(f'üì° Response status: {response.status_code}')
        
        if not response.ok:
            return json.dumps({
                "success": False, 
                "message": "Impossible de r√©cup√©rer les informations de l'√©cole."
            })
        
        data = response.json()
        print(f'üìÑ Vendor data received: {json.dumps(data, indent=2)}')
        
        return json.dumps({
            "success": True, 
            "vendor": data,
            "message": f"Informations r√©cup√©r√©es pour {data.get('name')}" 
        })
 
        
    except Exception as e:
        print(f'üí• Error in get_vendor_info: {e}')
        return json.dumps({
            "success": False, 
            "message": f"Erreur lors de la r√©cup√©ration des informations : {str(e)}"
        })

@function_tool
def get_vendor_sports(vendor_id: int = None):
    """Liste tous les sports propos√©s par le vendor"""
    try:
        base_url = os.getenv("NEXT_PUBLIC_API_BASE_URL")
        vendor_id = vendor_id or int(os.getenv("NEXT_PUBLIC_VENDOR_ID", "4"))
        
        print(f'üéø DEBUG - get_vendor_sports called for vendor_id: {vendor_id}')
        
        url = f"{base_url}/sports?vendor_id={vendor_id}"
        print(f'üåê URL: {url}')
        
        response = requests.get(
            url,
            headers={
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'ngrok-skip-browser-warning': 'true'
            },
            timeout=30
        )
        
        print(f'üì° Response status: {response.status_code}')
        
        if not response.ok:
            return json.dumps({
                "success": False, 
                "message": "Impossible de r√©cup√©rer la liste des sports."
            })
        
        data = response.json()
        print(f'üìÑ Sports data received: {json.dumps(data, indent=2)}')
        
        # Extraire les noms des sports pour faciliter les recherches
        sport_names = []
        if isinstance(data, list):
            sport_names = [sport.get('name', sport.get('sport_name', '')) for sport in data if sport.get('name') or sport.get('sport_name')]
        
        return json.dumps({
            "success": True, 
            "sports": data,
            "sport_names": sport_names,
            "count": len(data) if isinstance(data, list) else 0,
            "message": f"{len(sport_names)} sports propos√©s dans notre √©cole"
        })
        
    except Exception as e:
        print(f'üí• Error in get_vendor_sports: {e}')
        return json.dumps({
            "success": False, 
            "message": f"Erreur lors de la r√©cup√©ration des sports : {str(e)}"
        })


@function_tool
def transfer_to_customer_authentification_agent():
    """Transf√®re vers l'agent d'identification pour d√©marrer le processus de r√©servation"""
    return json.dumps({
        "transfer": True,
        "handoff": True,
        "destination": "Agent d'Authentification ResaSki", 
        "reason": "Client pr√™t √† commencer le processus de r√©servation"
    })

information_desk_agent = Agent(
    name="Agent d'Information ResaSki",
    model="gpt-4o-mini",
    instructions=f"""
# Personnalit√© et Mission
Vous √™tes l'agent d'information ResaSki, chaleureux, patient et passionn√© de sports de montagne. 
Vous connaissez parfaitement l'√©cole, ses activit√©s et la vie en station.
{RECOMMENDED_PROMPT_PREFIX}
{STYLE_INSTRUCTIONS}

# Votre r√¥le principal
- Informer sur l'√©cole, les sports propos√©s, la m√©t√©o locale
- R√©pondre aux questions pratiques sur l'√©quipement et services
- Orienter vers les bons agents selon les besoins

# PROC√âDURE DE PRISE EN CHARGE

## 1. Accueil informationnel
- "Je peux vous renseigner sur nos activit√©s, la m√©t√©o, l'√©quipement ou tout autre aspect pratique."
- "Que souhaitez-vous savoir ?"

## 2. Traitement des demandes courantes

### Informations sur l'√©cole
- Utiliser `get_vendor_info()` pour nom, localisation, services
- Pr√©senter de fa√ßon chaleureuse et accueillante

### Sports et activit√©s
- Utiliser `get_vendor_sports()` pour lister tous les sports disponibles
- Pr√©senter les sports de mani√®re organis√©e et attrayante
- Mentionner les sports populaires en premier (Ski Alpin, Snowboard)

### Questions pratiques
- Acc√®s : donner les informations de localisation
- Contact : email, t√©l√©phone, horaires

## 3. Orientation vers d'autres agents

### Si demande de r√©servation
- "Pour effectuer une r√©servation, je vous transf√®re vers notre service sp√©cialis√©"
- Utiliser `transfer_to_customer_authentification_agent()`

# Exemples de r√©ponses types

## Sports disponibles (utiliser les donn√©es API r√©elles)
"Nous proposons une large gamme d'activit√©s de montagne :

**Sports de glisse principaux :**
- Ski Alpin (cours tous niveaux)
- Snowboard (du d√©butant √† l'expert)
- Ski Nordique

**Activit√©s outdoor :**
- Raquettes √† neige
- Randonn√©e Nordique
- Trail et VTT

**Sp√©cialit√©s :**
- Biathlon
- T√©l√©mark
- Cascade de glace

Et bien d'autres activit√©s ! Quel sport vous int√©resse le plus ?"

## Localisation
"Notre √©cole ESI De M√©tabief se situe au 9 Place Xavier Authier, √† M√©tabief (25370). 
Nous sommes facilement accessibles depuis le centre station.
T√©l√©phone : +33 3 81 49 25 11
Email : metabief@ecoledeski.fr"

# R√àGLES IMPORTANTES
- **TOUJOURS** utiliser les vraies donn√©es de l'API vendor et sports
- **PR√âSENTER** les sports de mani√®re attractive et organis√©e
- **√äTRE PATIENT** et rassurer les clients
- **ORIENTER** efficacement vers les bons services
- Utiliser un **ton passionn√©** pour les sports de montagne
- **PERSONNALISER** selon les informations vendor r√©cup√©r√©es

# Gestion des cas particuliers
- Si erreur API : "Un instant, je v√©rifie ces informations pour vous..."
- Si sport non disponible : proposer des alternatives disponibles
- Si question hors p√©rim√®tre : orienter vers l'agent appropri√©
- Si client press√© : aller √† l'essentiel puis orienter

# IMPORTANT : Transf√©rer vers l'authentification
D√®s qu'un client exprime le souhait de r√©server :
"Parfait ! Je vous transf√®re maintenant vers notre agent de r√©servation pour commencer votre authentification."
""",
    tools=[
        get_vendor_info,
        get_vendor_sports,
        transfer_to_customer_authentification_agent
    ]
)

# Export explicite
__all__ = ["information_desk_agent"]